package asteroids.model.programs;import be.kuleuven.cs.som.annotate.*;public abstract class BinaryExpression extends ComposedExpression {	@Model	protected BinaryExpression(Expression left, Expression right, int line, int column) {		super(line, column);		if (!canHaveAsOperandAt(left,1))			throw new IllegalArgumentException(this + " left");		if (!canHaveAsOperandAt(right,2))			throw new IllegalArgumentException(this + " right");		setOperandAt(1, left);		setOperandAt(2, right);	}	@Override	@Basic	public final int getNbOperands() {		return 2;	}	@Override	@Raw	public final Expression getOperandAt(int index)			throws IndexOutOfBoundsException {		if ((index != 1) && (index != 2))			throw new IndexOutOfBoundsException();		if (index == 1)			return getLeftOperand();		else			return getRightOperand();	}		@Override	public boolean canHaveAsOperandAt(Expression expression, int index) {		return super.canHaveAsOperandAt(expression, index) && ( (index == 1) || (index == 2) );	}	@Override	@Raw	protected void setOperandAt(int index, Expression operand) {		if (index == 1)			this.leftOperand = operand;		else			this.rightOperand = operand;	}	@Basic	public Expression getLeftOperand() {		return leftOperand;	}	private Expression leftOperand;	@Basic	public Expression getRightOperand() {		return rightOperand;	}	private Expression rightOperand;}